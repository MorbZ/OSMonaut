/** Copyright (c) 2010 Scott A. Crosby. <scott@sacrosby.com>

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation, either version 3 of the
   License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/

/* Original source: https://github.com/scrosby/OSM-binary/blob/master/src/osmformat.proto

Optimized to not serialize objects that aren't needed (e.g. Info/Changeset) for better performance. Compile with protoc >= v3.0. */

syntax = "proto2";
option optimize_for = SPEED;
option java_package = "net.morbz.osmonaut.binary.pbf.proto";

package OSMPBF;

message HeaderBlock {
  optional HeaderBBox bbox = 1;

  repeated string required_features = 4;
  repeated string optional_features = 5;

  optional string writingprogram = 16;
  optional string source = 17; // From the bbox field.

  message HeaderBBox {
	required sint64 left = 1;
    required sint64 right = 2;
    required sint64 top = 3;
    required sint64 bottom = 4;
  }
}

message PrimitiveBlock {
  required StringTable stringtable = 1;
  repeated PrimitiveGroup primitivegroup = 2;

  optional int32 granularity = 17 [default=100];

  optional int64 lat_offset = 19 [default=0];
  optional int64 lon_offset = 20 [default=0];

  message StringTable {
    repeated bytes s = 1;
  }

  message PrimitiveGroup {
    repeated Node     nodes = 1;
    optional DenseNodes dense = 2;
    repeated Way      ways = 3;
    repeated Relation relations = 4;

    message Node {
  	  required sint64 id = 1;
  	  // Parallel arrays.
  	  repeated uint32 keys = 2 [packed = true]; // String IDs.
  	  repeated uint32 vals = 3 [packed = true]; // String IDs.

  	  required sint64 lat = 8;
  	  required sint64 lon = 9;
    }

    message DenseNodes {
      repeated sint64 id = 1 [packed = true]; // DELTA coded

  	  repeated sint64 lat = 8 [packed = true]; // DELTA coded
  	  repeated sint64 lon = 9 [packed = true]; // DELTA coded

  	  repeated int32 keys_vals = 10 [packed = true];
    }

    message Way {
      required int64 id = 1;
  	  // Parallel arrays.
  	  repeated uint32 keys = 2 [packed = true];
  	  repeated uint32 vals = 3 [packed = true];

  	  repeated sint64 refs = 8 [packed = true];  // DELTA coded
    }

    message Relation {
      enum MemberType {
  	    NODE = 0;
  	    WAY = 1;
  	    RELATION = 2;
      }

  	  required int64 id = 1;

  	  // Parallel arrays.
  	  repeated uint32 keys = 2 [packed = true];
  	  repeated uint32 vals = 3 [packed = true];

  	  // Parallel arrays
  	  repeated int32 roles_sid = 8 [packed = true];
  	  repeated sint64 memids = 9 [packed = true]; // DELTA encoded
  	  repeated MemberType types = 10 [packed = true];
    }
  }
}
